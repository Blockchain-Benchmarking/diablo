Diablo Benchmark Workload                                          2020

================================================================================

        CONTENTION CORNERCASE

================================================================================


Description of the workload

    This workload is an artificial workload created to showcase the limitations of the execute-order scheme (X0) used in Hyperledger Fabric.
    It is heavily inspired by [1].

Curve Definition:

        (Small visual representation of the curve of the benchmark)

        |
        |
        |
        |
        |
        |
        |xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
        |
        |
      0 |______________________________________________________________________
        0



Experimental Setup:

    Number of Nodes (blockchain): < 1
    Number of Secondaries:  1
    Number of Threads:  1

    Justification:

    A constant curve will suffice to showcase our cornercase as clients will resend transactions that have failed.

    Blockchain Classifications:

        Hyperledger Fabric


Contract:

    The smart contract source code is available in ./chaincode-go

    The contract will be very simple and consist of creating assets and committing them to the ledger and then modifying those assets.

Justification:

   This cornercase workload may showcase a problem with the XO(execute order) way  of processing transactions of Fabric.
   Suppose every 5 seconds, 20 transactions try to modify the same (key,value) pair in a block of 100 transactions. Then, only one of the
   20 transactions will be considered valid and the rest will be tagged as invalid.
   Subsequently, all 19 aborted clients will attempt to re-execute their transactions, plus the new 20 transactions every 5 seconds.
   This leads to 38 aborted transactions in the next round, and so on. Clearly, with cumulative re-execution, the number of
   aborted transactions grows linearly until it surpasses the throughput of the system. Thus, if clients re-execute aborted
   transactions, their default behaviour, this effectively becomes an unintentional denial of service attack on the blockchain![1]


   Why does this happen in Hyperledger Fabric ?

   Updating the ledger is done in three phases :

   - Execution of smart contract on endorsing peers
   - Ordering of the transactions into blocks by the orderer
   - Validation of the block by each peer before updating the ledger


    After the third phase, If a transaction has been endorsed correctly, the peer will attempt to apply it to the ledger.
    To do this, a peer must perform a ledger consistency check to verify that the current state of the ledger is compatible
    with the state of the ledger when the proposed update was generated. !! This may not always be possible, even when the transaction has been fully endorsed.
    For example, another transaction may have updated the same asset in the ledger such that the transaction update is no longer
    valid and therefore can no longer be applied. !! In this way, the ledger is kept consistent across each peer in the channel
    because they each follow the same rules for validation.[2]

Resources

[1] C. Gorenflo, L. Golab, and S. Keshav, “XOX Fabric: A hybrid approach to blockchain transaction execution,”
[Online] Available:https://arxiv.org/abs/1906.11229v3, 2020.

[2] “Hyperledger Fabric documentation : Peers,”
[Online] Available: https://hyperledger-fabric.readthedocs.io/en/release-2.2/peers/peers.html, 2020
