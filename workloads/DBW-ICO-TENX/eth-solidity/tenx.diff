2,5c2,6
<  *Submitted for verification at Etherscan.io on 2017-06-16
< */
< 
< pragma solidity 0.4.11;
---
>  * Updated TenX Contract for Diablo
>  * Changes Listed in: contaract-changes.diff
>  * Original Source credit: TenX team
>  * Original location: Etherscan.io
>  **/
6a8
> pragma solidity 0.7.0;
21c23
<   function Ownable() {
---
>   constructor() {
31c33
<       throw;
---
>       revert();
41c43
<   function transferOwnership(address newOwner) onlyOwner {
---
>   function transferOwnership(address newOwner) external onlyOwner {
49,50d50
< 
< 
56c56
<  * [{"constant":true,"inputs":[{"name":"authorizerIndex","type":"uint256"}],"name":"getAuthorizer","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_addr","type":"address"}],"name":"addAuthorized","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"_addr","type":"address"}],"name":"isAuthorized","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"inputs":[],"payable":false,"type":"constructor"}]
---
>  * [{"view":true,"inputs":[{"name":"authorizerIndex","type":"uint256"}],"name":"getAuthorizer","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"view":false,"inputs":[{"name":"_addr","type":"address"}],"name":"addAuthorized","outputs":[],"payable":false,"type":"function"},{"view":true,"inputs":[{"name":"_addr","type":"address"}],"name":"isAuthorized","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"inputs":[],"payable":false,"type":"constructor"}]
74,76c74,75
<   function Authorizable() {
<     authorizers.length = 2;
<     authorizers[1] = msg.sender;
---
>   constructor() {
>     authorizers.push(msg.sender);
82c81
<    * @param authorizerIndex index of the authorizer to be retrieved.
---
>    * @param givenIndex index of the authorizer to be retrieved.
85,86c84,85
<   function getAuthorizer(uint authorizerIndex) external constant returns(address) {
<     return address(authorizers[authorizerIndex + 1]);
---
>   function getAuthorizer(uint givenIndex) external view returns(address) {
>     return address(authorizers[givenIndex + 1]);
94c93
<   function isAuthorized(address _addr) constant returns(bool) {
---
>   function isAuthorized(address _addr) public view returns(bool) {
104,105c103
<     authorizers.length++;
<     authorizers[authorizers.length - 1] = _addr;
---
>     authorizers.push(_addr);
115c113
<  * [{"constant":false,"inputs":[{"name":"_symbol","type":"string"},{"name":"_rate","type":"uint256"}],"name":"updateRate","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"data","type":"uint256[]"}],"name":"updateRates","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"_symbol","type":"string"}],"name":"getRate","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"","type":"bytes32"}],"name":"rates","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"type":"function"},{"anonymous":false,"inputs":[{"indexed":false,"name":"timestamp","type":"uint256"},{"indexed":false,"name":"symbol","type":"bytes32"},{"indexed":false,"name":"rate","type":"uint256"}],"name":"RateUpdated","type":"event"}]
---
>  * [{"view":false,"inputs":[{"name":"_symbol","type":"string"},{"name":"_rate","type":"uint256"}],"name":"updateRate","outputs":[],"payable":false,"type":"function"},{"view":false,"inputs":[{"name":"data","type":"uint256[]"}],"name":"updateRates","outputs":[],"payable":false,"type":"function"},{"view":true,"inputs":[{"name":"_symbol","type":"string"}],"name":"getRate","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"view":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"view":true,"inputs":[{"name":"","type":"bytes32"}],"name":"rates","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"view":false,"inputs":[{"name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"type":"function"},{"anonymous":false,"inputs":[{"indexed":false,"name":"timestamp","type":"uint256"},{"indexed":false,"name":"symbol","type":"bytes32"},{"indexed":false,"name":"rate","type":"uint256"}],"name":"RateUpdated","type":"event"}]
128,130c126,128
<   function updateRate(string _symbol, uint _rate) public onlyOwner {
<     rates[sha3(_symbol)] = _rate;
<     RateUpdated(now, sha3(_symbol), _rate);
---
>   function updateRate(bytes memory _symbol, uint _rate) public onlyOwner {
>     rates[keccak256(_symbol)] = _rate;
>     emit RateUpdated(block.timestamp, keccak256(_symbol), _rate);
137c135
<   function updateRates(uint[] data) public onlyOwner {
---
>   function updateRates(uint[] memory data) public onlyOwner {
139c137
<       throw;
---
>       revert();
145c143
<       RateUpdated(now, symbol, rate);
---
>       emit RateUpdated(block.timestamp, symbol, rate);
154,155c152,153
<   function getRate(string _symbol) public constant returns(uint) {
<     return rates[sha3(_symbol)];
---
>   function getRate(bytes memory _symbol) public view returns(uint) {
>     return rates[keccak256(_symbol)];
188c186
<   function max64(uint64 a, uint64 b) internal constant returns (uint64) {
---
>   function max64(uint64 a, uint64 b) internal view returns (uint64) {
192c190
<   function min64(uint64 a, uint64 b) internal constant returns (uint64) {
---
>   function min64(uint64 a, uint64 b) internal view returns (uint64) {
196c194
<   function max256(uint256 a, uint256 b) internal constant returns (uint256) {
---
>   function max256(uint256 a, uint256 b) internal view returns (uint256) {
200c198
<   function min256(uint256 a, uint256 b) internal constant returns (uint256) {
---
>   function min256(uint256 a, uint256 b) internal view returns (uint256) {
206c204
<       throw;
---
>       revert();
210a209
> contract PayToken {
212,247c211,215
< /**
<  * @title ERC20Basic
<  * @dev Simpler version of ERC20 interface
<  * @dev see https://github.com/ethereum/EIPs/issues/20
<  */
< contract ERC20Basic {
<   uint public totalSupply;
<   function balanceOf(address who) constant returns (uint);
<   function transfer(address to, uint value);
<   event Transfer(address indexed from, address indexed to, uint value);
< }
< 
< 
< 
< 
< /**
<  * @title ERC20 interface
<  * @dev see https://github.com/ethereum/EIPs/issues/20
<  */
< contract ERC20 is ERC20Basic {
<   function allowance(address owner, address spender) constant returns (uint);
<   function transferFrom(address from, address to, uint value);
<   function approve(address spender, uint value);
<   event Approval(address indexed owner, address indexed spender, uint value);
< }
< 
< 
< 
< 
< /**
<  * @title Basic token
<  * @dev Basic version of StandardToken, with no allowances. 
<  */
< contract BasicToken is ERC20Basic {
<   using SafeMath for uint;
< 
---
>     using SafeMath for uint;
>   string public name = "TenX Pay Token";
>   string public symbol = "PAY";
>   uint public decimals = 18;
>   uint public totalSupply = 0;
249,344c217,219
< 
<   /**
<    * @dev Fix for the ERC20 short address attack.
<    */
<   modifier onlyPayloadSize(uint size) {
<      if(msg.data.length < size + 4) {
<        throw;
<      }
<      _;
<   }
< 
<   /**
<   * @dev transfer token for a specified address
<   * @param _to The address to transfer to.
<   * @param _value The amount to be transferred.
<   */
<   function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) {
<     balances[msg.sender] = balances[msg.sender].sub(_value);
<     balances[_to] = balances[_to].add(_value);
<     Transfer(msg.sender, _to, _value);
<   }
< 
<   /**
<   * @dev Gets the balance of the specified address.
<   * @param _owner The address to query the the balance of. 
<   * @return An uint representing the amount owned by the passed address.
<   */
<   function balanceOf(address _owner) constant returns (uint balance) {
<     return balances[_owner];
<   }
< 
< }
< 
< 
< 
< 
< /**
<  * @title Standard ERC20 token
<  *
<  * @dev Implemantation of the basic standart token.
<  * @dev https://github.com/ethereum/EIPs/issues/20
<  * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol
<  */
< contract StandardToken is BasicToken, ERC20 {
< 
<   mapping (address => mapping (address => uint)) allowed;
< 
< 
<   /**
<    * @dev Transfer tokens from one address to another
<    * @param _from address The address which you want to send tokens from
<    * @param _to address The address which you want to transfer to
<    * @param _value uint the amout of tokens to be transfered
<    */
<   function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32) {
<     var _allowance = allowed[_from][msg.sender];
< 
<     // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met
<     // if (_value > _allowance) throw;
< 
<     balances[_to] = balances[_to].add(_value);
<     balances[_from] = balances[_from].sub(_value);
<     allowed[_from][msg.sender] = _allowance.sub(_value);
<     Transfer(_from, _to, _value);
<   }
< 
<   /**
<    * @dev Aprove the passed address to spend the specified amount of tokens on beahlf of msg.sender.
<    * @param _spender The address which will spend the funds.
<    * @param _value The amount of tokens to be spent.
<    */
<   function approve(address _spender, uint _value) {
< 
<     // To change the approve amount you first have to reduce the addresses`
<     //  allowance to zero by calling `approve(_spender, 0)` if it is not
<     //  already 0 to mitigate the race condition described here:
<     //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
<     if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;
< 
<     allowed[msg.sender][_spender] = _value;
<     Approval(msg.sender, _spender, _value);
<   }
< 
<   /**
<    * @dev Function to check the amount of tokens than an owner allowed to a spender.
<    * @param _owner address The address which owns the funds.
<    * @param _spender address The address which will spend the funds.
<    * @return A uint specifing the amount of tokens still avaible for the spender.
<    */
<   function allowance(address _owner, address _spender) constant returns (uint remaining) {
<     return allowed[_owner][_spender];
<   }
< 
< }
< 
< 
---
>   
>   mapping(address => mapping(address => uint)) allowed;
>   address owner;
346a222
>   bool public tradingStarted = true;
348,356d223
< 
< /**
<  * @title Mintable token
<  * @dev Simple ERC20 Token example, with mintable token creation
<  * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120
<  * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol
<  */
< 
< contract MintableToken is StandardToken, Ownable {
359c226,231
< 
---
>   event Transfer(address from, address to, uint value);
>   
>   constructor() {
>     owner = msg.sender;
>   }
>   
361c233,237
<   uint public totalSupply = 0;
---
>   
>   modifier onlyOwner() {
>         require(msg.sender == owner);
>         _;
>   }
365,366c241,242
<     if(mintingFinished) throw;
<     _;
---
>       if(mintingFinished) revert();
>       _;
369,375c245
<   /**
<    * @dev Function to mint tokens
<    * @param _to The address that will recieve the minted tokens.
<    * @param _amount The amount of tokens to mint.
<    * @return A boolean that indicates if the operation was successful.
<    */
<   function mint(address _to, uint _amount) onlyOwner canMint returns (bool) {
---
>   function mint(address _to, uint _amount) public onlyOwner canMint returns (bool) {
383,409d252
<    * @dev Function to stop minting new tokens.
<    * @return True if the operation was successful.
<    */
<   function finishMinting() onlyOwner returns (bool) {
<     mintingFinished = true;
<     MintFinished();
<     return true;
<   }
< }
< 
< 
< /**
<  * @title PayToken
<  * @dev The main PAY token contract
<  * 
<  * ABI 
<  * [{"constant":true,"inputs":[],"name":"mintingFinished","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"}],"name":"approve","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transferFrom","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"startTrading","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_amount","type":"uint256"}],"name":"mint","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"tradingStarted","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"}],"name":"balanceOf","outputs":[{"name":"balance","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"finishMinting","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transfer","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"},{"name":"_spender","type":"address"}],"name":"allowance","outputs":[{"name":"remaining","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"type":"function"},{"anonymous":false,"inputs":[{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Mint","type":"event"},{"anonymous":false,"inputs":[],"name":"MintFinished","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"owner","type":"address"},{"indexed":true,"name":"spender","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Transfer","type":"event"}]
<  */
< contract PayToken is MintableToken {
< 
<   string public name = "TenX Pay Token";
<   string public symbol = "PAY";
<   uint public decimals = 18;
< 
<   bool public tradingStarted = false;
< 
<   /**
420c263
<   function startTrading() onlyOwner {
---
>   function startTrading() public onlyOwner {
429,430c272,275
<   function transfer(address _to, uint _value) hasStartedTrading {
<     super.transfer(_to, _value);
---
>   function transfer(address _to, uint _value) public hasStartedTrading  {
>     balances[msg.sender] = balances[msg.sender].sub(_value);
>     balances[_to] = balances[_to].add(_value);
>     Transfer(msg.sender, _to, _value);
439,440c284,293
<   function transferFrom(address _from, address _to, uint _value) hasStartedTrading {
<     super.transferFrom(_from, _to, _value);
---
>   function transferFrom(address _from, address _to, uint _value) public hasStartedTrading {
>     uint _allowance = allowed[_from][msg.sender];
> 
>     // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met
>     // if (_value > _allowance) throw;
> 
>     balances[_to] = balances[_to].add(_value);
>     balances[_from] = balances[_from].sub(_value);
>     allowed[_from][msg.sender] = _allowance.sub(_value);
>     Transfer(_from, _to, _value);
442a296,303
>   /**
>   * @dev Gets the balance of the specified address.
>   * @param who The address to query the the balance of. 
>   * @return An uint representing the amount owned by the passed address.
>   */
>   function balanceOf(address who) external view  virtual returns (uint) {
>     return balances[who];
>   }
446,452c307,308
< /**
<  * @title MainSale
<  * @dev The main PAY token sale contract
<  * 
<  * ABI
<  * [{"constant":false,"inputs":[{"name":"_multisigVault","type":"address"}],"name":"setMultisigVault","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"authorizerIndex","type":"uint256"}],"name":"getAuthorizer","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"exchangeRate","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"altDeposits","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"recipient","type":"address"},{"name":"tokens","type":"uint256"}],"name":"authorizedCreateTokens","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"finishMinting","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_exchangeRate","type":"address"}],"name":"setExchangeRate","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_token","type":"address"}],"name":"retrieveTokens","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"totalAltDeposits","type":"uint256"}],"name":"setAltDeposit","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"start","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"recipient","type":"address"}],"name":"createTokens","outputs":[],"payable":true,"type":"function"},{"constant":false,"inputs":[{"name":"_addr","type":"address"}],"name":"addAuthorized","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"multisigVault","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_hardcap","type":"uint256"}],"name":"setHardCap","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_start","type":"uint256"}],"name":"setStart","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"token","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"_addr","type":"address"}],"name":"isAuthorized","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"payable":true,"type":"fallback"},{"anonymous":false,"inputs":[{"indexed":false,"name":"recipient","type":"address"},{"indexed":false,"name":"ether_amount","type":"uint256"},{"indexed":false,"name":"pay_amount","type":"uint256"},{"indexed":false,"name":"exchangerate","type":"uint256"}],"name":"TokenSold","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"recipient","type":"address"},{"indexed":false,"name":"pay_amount","type":"uint256"}],"name":"AuthorizedCreate","type":"event"},{"anonymous":false,"inputs":[],"name":"MainSaleClosed","type":"event"}]
<  */
---
> 
> 
454a311
>   
461c318
<   address public multisigVault;
---
>   address payable public multisigVault;
473c330,332
<     require(now > start && now < start + 28 days);
---
>     // require(now > start && now < start + 28 days);
>     // MODIFIED FOR BENCHMARK SCENARIOS
>     require(block.timestamp >= start);
481c340,341
<     require(multisigVault.balance + altDeposits <= hardcap);
---
>     require(1 == 1);
>     // require(multisigVault.balance + altDeposits <= hardcap);
484a345,348
>   constructor() {
>     start = block.timestamp;
>   }
> 
494c358
<     TokenSold(recipient, msg.value, tokens, rate);
---
>     emit TokenSold(recipient, msg.value, tokens, rate);
497d360
< 
513,521c376
<     AuthorizedCreate(recipient, tokens);
<   }
< 
<   /**
<    * @dev Allows the owner to set the hardcap.
<    * @param _hardcap the new hardcap
<    */
<   function setHardCap(uint _hardcap) public onlyOwner {
<     hardcap = _hardcap;
---
>     emit AuthorizedCreate(recipient, tokens);
524,530c379,386
<   /**
<    * @dev Allows the owner to set the starting time.
<    * @param _start the new _start
<    */
<   function setStart(uint _start) public onlyOwner {
<     start = _start;
<   }
---
>   
>     /**
>      * @dev Allows the owner to set the hardcap.
>      * @param _hardcap the new hardcap
>      */
>     function setHardCap(uint _hardcap) public onlyOwner {
>       hardcap = _hardcap;
>     }
532,538c388,393
<   /**
<    * @dev Allows the owner to set the multisig contract.
<    * @param _multisigVault the multisig contract address
<    */
<   function setMultisigVault(address _multisigVault) public onlyOwner {
<     if (_multisigVault != address(0)) {
<       multisigVault = _multisigVault;
---
>     /**
>      * @dev Allows the owner to set the starting time.
>      * @param _start the new _start
>      */
>     function setStart(uint _start) public onlyOwner {
>       start = _start;
540d394
<   }
542,548c396,404
<   /**
<    * @dev Allows the owner to set the exchangerate contract.
<    * @param _exchangeRate the exchangerate address
<    */
<   function setExchangeRate(address _exchangeRate) public onlyOwner {
<     exchangeRate = ExchangeRate(_exchangeRate);
<   }
---
>     /**
>      * @dev Allows the owner to set the multisig contract.
>      * @param _multisigVault the multisig contract address
>      */
>     function setMultisigVault(address payable _multisigVault) public onlyOwner {
>       if (_multisigVault != address(0)) {
>         multisigVault = _multisigVault;
>       }
>     }
550,563c406,412
<   /**
<    * @dev Allows the owner to finish the minting. This will create the 
<    * restricted tokens and then close the minting.
<    * Then the ownership of the PAY token contract is transfered 
<    * to this owner.
<    */
<   function finishMinting() public onlyOwner {
<     uint issuedTokenSupply = token.totalSupply();
<     uint restrictedTokens = issuedTokenSupply.mul(49).div(51);
<     token.mint(multisigVault, restrictedTokens);
<     token.finishMinting();
<     token.transferOwnership(owner);
<     MainSaleClosed();
<   }
---
>     /**
>      * @dev Allows the owner to set the exchangerate contract.
>      * @param _exchangeRate the exchangerate address
>      */
>     function setExchangeRate(address _exchangeRate) public onlyOwner {
>       exchangeRate = ExchangeRate(_exchangeRate);
>     }
565,572c414,425
<   /**
<    * @dev Allows the owner to transfer ERC20 tokens to the multi sig vault
<    * @param _token the contract address of the ERC20 contract
<    */
<   function retrieveTokens(address _token) public onlyOwner {
<     ERC20 token = ERC20(_token);
<     token.transfer(multisigVault, token.balanceOf(this));
<   }
---
>     /**
>      * @dev Allows the owner to finish the minting. This will create the 
>      * restricted tokens and then close the minting.
>      * Then the ownership of the PAY token contract is transfered 
>      * to this owner.
>      */
>     function finishMinting() public onlyOwner {
>       uint issuedTokenSupply = token.totalSupply();
>       uint restrictedTokens = issuedTokenSupply.mul(49).div(51);
>       token.mint(multisigVault, restrictedTokens);
>       emit MainSaleClosed();
>     }
574,580c427,429
<   /**
<    * @dev Fallback function which receives ether and created the appropriate number of tokens for the 
<    * msg.sender.
<    */
<   function() external payable {
<     createTokens(msg.sender);
<   }
---
>     receive() external payable {
>       createTokens(msg.sender);
>     }
